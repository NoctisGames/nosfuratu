import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    signingConfigs {
        gowengamedev {
            keyAlias 'gowengamedev'
            keyPassword 'GGD_PASS'
            storeFile file('/Users/sgowen/Dropbox/Documents/Freelance/GowenGameDev/github/nosfuratu/src/platform/android/keystore.jks')
            storePassword 'GGD_PASS'
        }
    }
    compileSdkVersion 23
    buildToolsVersion "23.0.0"
    defaultConfig {
        applicationId "com.gowengamedev.nosfuratu"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "0.2.001"
        signingConfig signingConfigs.gowengamedev
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "IS_LEVEL_EDITOR", "false"
        }
        debug {
            debuggable true
            applicationIdSuffix ".le"
            versionNameSuffix "-le"
            buildConfigField "boolean", "IS_LEVEL_EDITOR", "true"
        }
    }
    sourceSets.main.jni.srcDirs 'src/main/jni'
    // disable the automatic ndk-build call, which would ignore our Android.mk
    sourceSets.main.jniLibs.srcDir 'src/main/libs'
    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd()
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }
    task cleanNative(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd(), 'clean'
    }
    clean.dependsOn cleanNative

    task copyFrameworkShaders(type: Copy)
    copyFrameworkShaders {
        description = 'Copies shaders from src/core/framework/ui/opengles into project assets'
        from '../../../../src/core/framework/ui/opengles'
        into 'src/main/assets'
        include('*.*sh')
    }

    task copyGameShaders(type: Copy)
    copyGameShaders {
        description = 'Copies shaders from src/core/game/ui/opengles into project assets'
        from '../../../../src/core/game/ui/opengles'
        into 'src/main/assets'
        include('*.*sh')
    }

    task copyTextures(type: Copy)
    copyTextures {
        description = 'Copies textures from root assets into project assets'
        from '../../../../assets/textures'
        into 'src/main/assets'
        include('*.png')
    }

    task copySounds(type: Copy)
    copySounds {
        description = 'Copies sounds from root assets into project assets'
        from '../../../../assets/sounds'
        into 'src/main/assets'
        include('*.wav')
    }

    preBuild.dependsOn(copyFrameworkShaders)
    preBuild.dependsOn(copyGameShaders)
    preBuild.dependsOn(copyTextures)
    preBuild.dependsOn(copySounds)
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.0.0'
}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        ndkbuild += ".cmd"

    return ndkbuild
}